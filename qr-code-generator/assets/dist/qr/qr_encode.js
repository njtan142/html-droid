import{alphanumeric_lookup_table,cc_bits_table}from"./qr_table.js";import{NUMERIC,ALPHANUMERIC,BYTE,KANJI,ECI}from"./types.js";import{split_into_groups}from"../utils/util.js";const TERMINATOR="0000";export function encode(t,e,n,r){let o;switch(e){case NUMERIC:o=encode_numeric(t);break;case ALPHANUMERIC:o=encode_alphanumeric(t);break;case BYTE:o=encode_byte(t);break;case KANJI:throw new Error("Kanji encoding not implemented yet");default:o=encode_byte(t);break}const a=pad_bit_stream(o,get_prepend_bits(t.length,e,n),r);return split_into_groups(a,8)}function encode_numeric(t){return split_into_groups(t,3).flatMap((t=>1===t.length?parseInt(t).toString(2).padStart(4,"0"):2===t.length?parseInt(t).toString(2).padStart(7,"0"):parseInt(t).toString(2).padStart(10,"0"))).join("")}function encode_alphanumeric(t){const e=t.toUpperCase();return split_into_groups(e,2).flatMap((t=>{if(1===t.length)return alphanumeric_lookup_table[t].toString(2).padStart(6,"0");const e=t[0],n=t[1];let r=45*alphanumeric_lookup_table[e];return r+=alphanumeric_lookup_table[n],r.toString(2).padStart(11,"0")})).join("")}function encode_byte(t){return t.split("").map((t=>t.charCodeAt(0).toString(2).padStart(8,"0"))).join("")}function pad_bit_stream(t,e,n){let r=e+t;const o=n-r.length;if(o<0)throw new Error("Data too long to encode");if(0===o)return r;if(o<4)return r+="0".repeat(o),r;for(r+="0000";r.length%8!=0;)r+="0";for(;r.length<n;)r+="11101100",r.length<n&&(r+="00010001");return r}export function cc_bits(t,e){const n=cc_bits_table[e];return t<=9?n[0]:t<=26?n[1]:n[2]}export function get_prepend_bits(t,e,n){const r=cc_bits(n,e.name),o=t.toString(2).padStart(r,"0");return e.encoding_mode.toString(2).padStart(4,"0")+o}export function get_encoding_mode(t){return NUMERIC.regex.test(t)?NUMERIC:ALPHANUMERIC.regex.test(t)?ALPHANUMERIC:BYTE.regex.test(t)?BYTE:KANJI.regex.test(t)?KANJI:ECI}