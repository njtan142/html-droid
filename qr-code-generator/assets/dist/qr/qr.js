import{encode,get_encoding_mode}from"./qr_encode.js";import{ERROR_CORRECTION_COL,GROUP_1_BLOCKS,GROUP_1_DATA,GROUP_2_BLOCKS,GROUP_2_DATA,TOTAL_CODEWORDS_COL,qr_table}from"./qr_table.js";import{rs_encode_message}from"../reed/rs.js";import{int_array_to_bit_string}from"../utils/util.js";export function get_qr_context(e,t){const r=get_encoding_mode(e),[o,n,_,l,a]=get_version_info(e.length,r,t);return{data:e,error_correction_level:t,version:o,data_type:r,codeword_capacity:n,ec_block_len:_,group_1:l,group_2:a}}export function get_version_info(e,t,r){const o=qr_table[r];let n,_;for(let r=0;r<o.length;r++)if(o[r][t.table_column]>=e){n=r+1,_=o[r];break}if(!n||!_)throw new Error("Data too long to encode");return[n,_[TOTAL_CODEWORDS_COL],_[ERROR_CORRECTION_COL],[_[GROUP_1_BLOCKS],_[GROUP_1_DATA]],[_[GROUP_2_BLOCKS],_[GROUP_2_DATA]]]}export function generate_data_codewords(e){const t=encode(e.data,e.data_type,e.version,8*e.codeword_capacity),r=[];r.push(e.group_1),r.push(e.group_2),r[0][1]>r[1][1]&&r.reverse();const o=[],n=[];for(let _=0;_<r.length;_++){const l=r[_][0],a=r[_][1];for(let r=0;r<l;r++){const _=r*a,l=_+a,u=t.slice(_,l),c=rs_encode_message(u,e.ec_block_len);o.push(u),n.push(int_array_to_bit_string(c))}}const _=[],l=r[0][1],a=r[1][1];for(let e=0;e<l;e++)for(let t=0;t<o.length;t++)_.push(o[t][e]);for(let e=l;e<a;e++)for(let t=0;t<o.length;t++)_.push(o[t][e]);for(let e=0;e<n[0].length;e++)for(let t=0;t<n.length;t++)_.push(n[t][e]);return _.join("")}export function evaluate_matrix(e){return evaluate_rule_one(e)+evaluate_rule_two(e)+evaluate_rule_three(e)+evaluate_rule_four(e)}export function evaluate_rule_one(e){const t=e=>{let t=1,r=e[0].value,o=0;for(let n=1;n<e.length;n++)e[n].value===r?t++:(t>=5&&(o+=t-5+3),t=1,r=e[n].value);return t>=5&&(o+=t-5+3),o};let r=0,o=0;for(let n=0;n<e.length;n++)r+=t(e[n]),o+=t(e.map((e=>e[n])));return r+o}export function evaluate_rule_two(e){let t=0;for(let r=0;r<e.length-1;r++)for(let o=0;o<e.length-1;o++){const n=e[r][o].value,_=e[r][o+1].value,l=e[r+1][o].value,a=e[r+1][o+1].value;n===_&&_===l&&l===a&&(t+=1)}return t}export function evaluate_rule_three(e){const t=[1,0,1,1,1,0,1],r=[0,0,0,0],o=r.concat(t),n=t.concat(r),_=o.length;let l=0;const a=e=>{let t=0;for(let r=0;r<=e.length-_;r++){const l=e.slice(r,r+_);(l.every(((e,t)=>e.value===o[t]))||l.every(((e,t)=>e.value===n[t])))&&(t+=1)}return 40*t};for(let t=0;t<e.length;t++){const r=e[t],o=e.map((e=>e[t]));l+=a(r),l+=a(o)}return l}export function evaluate_rule_four(e){const t=e.length*e.length,r=e.flat().reduce(((e,t)=>e+t.value),0)/t;return 10*Math.floor(Math.abs(r-.5)/.05)}