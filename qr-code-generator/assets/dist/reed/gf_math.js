const gf_exp=new Uint8Array(512),gf_log=new Uint8Array(256);function init_tables(){let t=1;for(let e=0;e<255;e++)gf_exp[e]=t,gf_log[t]=e,t<<=1,256&t&&(t^=285);for(let t=255;t<512;t++)gf_exp[t]=gf_exp[t-255]}init_tables();export function gf_add(t,e){return t^e}export function gf_sub(t,e){return t^e}export function gf_mul(t,e){return 0===t||0===e?0:gf_exp[gf_log[t]+gf_log[e]]}export function gf_div(t,e){if(0===t)return 0;if(0===e)throw new Error("division by zero");return gf_exp[gf_log[t]+255-gf_log[e]]}export function gf_pow(t,e){return 0===t?0:0===e?1:gf_exp[gf_log[t]*e]}export function gf_inverse(t){if(0===t)throw new Error("division by zero");return gf_exp[255-gf_log[t]]}export function gf_poly_scale(t,e){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=gf_mul(t[r],e);return n}export function gf_poly_add(t,e){const n=new Uint8Array(Math.max(t.length,e.length));for(let e=0;e<t.length;e++)n[e+n.length-t.length]=t[e];for(let t=0;t<e.length;t++)n[t+n.length-e.length]^=e[t];return n}export function gf_poly_mul(t,e){const n=new Uint8Array(t.length+e.length-1);for(let r=0;r<e.length;r++)for(let o=0;o<t.length;o++)n[o+r]^=gf_mul(t[o],e[r]);return n}export function gf_poly_eval(t,e){let n=t[0];for(let r=1;r<t.length;r++)n=gf_mul(n,e)^t[r];return n}